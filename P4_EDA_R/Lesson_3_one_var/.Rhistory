data(diamonds)
str(diamonds)
ggplot(diamonds, aes(x, price)) +
geom_point()
ggplot(diamonds, aes(x, price)) +
geom_point(alpha = 0.05, color = 'orange')
cor.test(diamonds$price, diamonds$x)
cor.test(diamonds$price, diamonds$y)
cor.test(diamonds$price, diamonds$z)
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 0.01)
range(diamonds$depth)
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 0.01) +
scale_x_continuous(breaks = seq(43,79,2))
quantile(diamonds$depth, probs = c(0.05,0.95))
cor.test(diamonds$depth, diamonds$price)
q_price = quantile(diamonds$price, probs = 0.99)
q_carat = quantile(diamonds$carat, probs = 0.99)
ggplot(subset(diamonds, price < q_price && carat < q_carat), aes(carat, price)) +
geom_point(alpha = 0.01)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(diamonds, aes(volume, price)) +
geom_point()
diamond.valid_volume <- subset(diamonds, volume > 0 && volume <= 800)
cor(diamond.valid_volume$volume, diamond.valid_volume$price)
diamond.valid_volume
diamond.valid_volume <- subset(diamonds, volume > 0 && volume < 800)
cor(diamond.valid_volume$volume, diamond.valid_volume$price)
cor(diamond$volume, diamond$price)
cor(diamonds$volume, diamonds$price)
diamond.valid_volume$volume == 0
diamond.valid_volume[diamond.valid_volume$volume == 0]
diamond.valid_volume[diamond.valid_volume$volume == 0,]
diamond.valid_volume[diamond.valid_volume$volume != 0,]
diamond.valid_volume <- subset(diamonds, diamonds$volume > 0 && diamonds$volume < 800)
cor(diamond.valid_volume$volume, diamond.valid_volume$price)
cor(diamonds$volume, diamonds$price)
length(subset(diamonds, diamonds$volume > 0 && diamonds$volume < 800))
dim(subset(diamonds, diamonds$volume > 0 && diamonds$volume < 800))
dim(diamonds)
str(diamonds)
sum(diamonds$volume > 0)
sum(diamonds$volume < 0)
sum(diamonds$volume < 800)
diamond.valid_volume <- subset(diamonds, diamonds$volume > 0 && diamonds$volume < 800)
sum(diamonds$volume == 0)
sum(diamond.valid_volume$volume == 0)
diamonds$volume > 0 && diamonds$volume < 800
diamonds$volume
diamonds$volume > 0
diamonds$volume > 0 & diamonds$volume < 800
diamond.valid_volume <- subset(diamonds, diamonds$volume > 0 & diamonds$volume < 800)
cor(diamond.valid_volume$volume, diamond.valid_volume$price)
cor(diamonds$volume, diamonds$price)
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
geom_smooth()
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
geom_smooth(method = 'lm', color = 'red')
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
geom_smooth(method = 'lm')
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
stat_smooth(method = 'lm')
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
stat_smooth(method = 'lm', formula = y~x, size =1)
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
stat_smooth()
method = 'lm', formula = y~x, size =1
ggplot(diamond.valid_volume, aes(volume, price)) +
geom_point(alpha = 0.01) +
stat_smooth(method = 'lm', formula = y~x, size =1)
library(dplyr)
diamondsByClarity <- diamonds %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamondsByClarity
str(clarity)
str(diamonds)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamondsByClarity
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
diamonds_mp_by_color
diamonds_mp_by_clarity
ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) +
geom_bar()
str(diamonds_mp_by_clarity)
ggplot(diamonds_mp_by_clarity, aes(clarity)) +
geom_bar()
ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) +
geom_bar(stat = "identity")
ggplot(diamonds_mp_by_color, aes(color, mean_price)) +
geom_bar(stat = "identity")
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) +
geom_bar(stat = "identity")
p2 <- ggplot(diamonds_mp_by_color, aes(color, mean_price)) +
geom_bar(stat = "identity")
grid.arrange(p1, p2, col = 2)
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
data(diamonds)
summary(diamonds)
dim(diamonds)
str(diamonds)
levels(diamonds$color)
ggplot(aes(x= price), data = diamonds)+
geom_histogram()
summary(diamonds$price)
dim(subset(diamonds, diamonds$price < 500))
dim(subset(diamonds, diamonds$price < 250))
dim(subset(diamonds, diamonds$price >= 15000))
ggplot(aes(x= log10(price+1)), data = diamonds)+
geom_histogram(bins = 30, color = 'black', fill = '#01cab4')
library(gridExtra)
g <- ggplot(aes(x= log10(price+1)), data = diamonds)+
geom_histogram(bins = 30, color = 'black', fill = '#01cab4')
g1 <- g + coord_cartesian(xlim = c(2.5, 3))
g2 <- g + coord_cartesian(xlim = c(3, 3.5))
g3 <- g + coord_cartesian(xlim = c(3.5, 4))
g4 <- g + coord_cartesian(xlim = c(4, 4.5))
g5 <- g + coord_cartesian(xlim = c(4.5, 5))
grid.arrange(g1, g2, g3, g4, g5, ncol=5)
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, median)
qplot(x = price, data = diamonds) + facet_wrap(~cut , scales="free")
ggplot(aes(x = price/carat), data = diamonds) +
geom_histogram() +
scale_x_log10() +
facet_grid(cut~.)
cols = c('#ff3f49',
'#01cab4',
'#01ffe7',
'#ffb914',
'#ffcb4b')
ggplot(aes(y = price, x = cut), data = diamonds) +
geom_boxplot(color = 'black', fill = cols) + coord_cartesian(ylim = c(0, 8000))
by(diamonds$price, diamonds$color, summary)
cols = c('#ff3f49',
'#01cab4',
'#01ffe7',
'#ffb914',
'#ffcb4b',
'#006775',
'#f63d47')
ggplot(aes(y = price/carat, x = color), data = diamonds) +
geom_boxplot(color = 'black', fill = cols) + coord_cartesian(ylim = c(0,8000))
ggplot(aes(x = carat), data = diamonds) +
geom_freqpoly(binwidth=.1) + scale_x_continuous(breaks = seq(0,5,0.1))
employRate <- read.csv('employmentRate.csv', header = T, row.names = 1, check.names = F)
head(employRate)
employRate <- employRate[,1:ncol(employRate)-1]  # remove last NA col
employRate$country <- rownames(employRate)
rownames(employRate) <- 1:nrow(employRate)
head(employRate)
library(dplyr)
employRate <- employRate %>% select(country, everything())
head(employRate)
library(tidyr)
employRate_gathered <- gather(employRate, "year", "employ_Rate", 2:ncol(employRate))
employRate_gathered$country <- as.factor(employRate_gathered$country)
employRate_gathered$year <- as.integer(employRate_gathered$year)
employ_2001 <- subset(employRate_gathered, year=2001)
ggplot(aes(x = employ_Rate), data = employ_2001) +
geom_histogram(binwidth = 5, color = 'black', fill = 'red')
ggplot(aes(y = employ_Rate, x = country), data = subset(employ_2001, country == c("Afghanistan", "Albania"))) +
geom_boxplot(color = "black", fill = c("red","green")) +
ylab("Employ Rate") +
ggtitle("Employ Rate of Afghanistan and Albania in 2001")
employRate_gathered
ggplot(employRate_gathered, aes(year, employ_Rate)) +
geom_point()
ggplot(employRate_gathered, aes(year, employ_Rate)) +
geom_point(alpha = 0.05)
ggplot(employRate_gathered, aes(year, employ_Rate)) +
geom_point(alpha = 0.5)
ggplot(employRate_gathered, aes(year, employ_Rate)) +
geom_point(alpha = 0.1)
ggplot(employRate_gathered, aes(year, employ_Rate)) +
geom_point(alpha = 0.1, color = 'orange') +
scale_x_continuous(breaks = seq(1980, 2010, 1))
ggplot(employRate_gathered, aes(year, employ_Rate)) +
geom_point(alpha = 0.1, color = 'orange') +
scale_x_continuous(breaks = seq(1980, 2010, 5))
library(ggplot2)
library(dplyr)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
library(ggplot2)
library(dplyr)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + boxplot() +
stat_summary(fun.y = mean, geom = 'point', shape = 4)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = mean, geom = 'point', shape = 4)
ggplot(subset(pf, !is.na(gender)), age, friend_count) +
geom_histogram()
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_histogram()
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
pf.fc_by_age_gender <- pf %>%
group_by(gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
group_by(age) %>%
group_by(gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- subset(pf, !is.na(gender) & !is.na(age)) %>%
group_by(age) %>%
group_by(gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- subset(pf, !is.na(gender) & !is.na(age)) %>%
group_by(age,gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- subset(pf, !is.na(gender) & !is.na(age)) %>%
group_by(gender, age) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- subset(pf, !is.na(gender) & !is.na(age)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup()
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
str(pf.fc_by_age_gender)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup()
str(pf.fc_by_age_gender)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>% # can clean up summarise df
arrange(age)
str(pf.fc_by_age_gender)
ggplot(pf.fc_by_age_gender, aes(age, mean_friend_count)) +
geom_line(aes(color = gender))
library(tidyr)
pf_ratio.gender <- pf.fc_by_age_gender %>%
select(age, gender, median_friend_count) %>%
spread(gender, median_friend_count)
pf_ratio.gender
pf_ratio.gender <- pf.fc_by_age_gender %>%
select(age, gender, median_friend_count) %>%
spread(gender, median_friend_count) %>%
mutate(ratio = male / female)
pf_ratio.gender
pf.fc_by_age_gender.wide <- pf.fc_by_age_gender %>%
select(age, gender, median_friend_count) %>%
spread(gender, median_friend_count) %>%
mutate(ratio = male / female)
pf.fc_by_age_gender.wide
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point()
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point(color = (ratio > 1))
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point(color = (pf.fc_by_age_gender.wide$ratio > 1))
cols <- ifelse(pf.fc_by_age_gender.wide$ratio > 1, "green", "red")
cols
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point(color = cols)
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point(color = cols) +
geom_hline(y=1)
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point(color = cols) +
geom_hline(yintercept=1)
ggplot(pf.fc_by_age_gender.wide, aes(age, ratio)) +
geom_point(color = cols) +
geom_hline(yintercept=1, linetype = 2)
str(pf)
2014 - int(pf$tenure / 365.0)
2014 - as.Integer(pf$tenure / 365.0)
2014 - as.integer(pf$tenure / 365.0)
as.integer(1.1)
as.integer(1.7)
round(1.7)
round(1.3)
pf$year_joined <- 2014 - ceiling(pf$tenure / 365.0)
seq(2009,2011,2)
seq(2009,2011,4)
seq(2009,2014,2)
cut(pf$year_joined, breaks = c(2009,2011,2012))
c(2004,2009,2011,2012,2014)
cut(pf$year_joined, breaks = c(2004,2009,2011,2012,2014))
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket))
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012,2014))
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket))
ggplot(subset(pf, !is.na(year_joined.bucket)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket))
ggplot(subset(pf, !is.na(year_joined.bucket)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(subset(pf, !is.na(year_joined.bucket)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = mean, linetype = 2)
with(subset(pf, tenure >= 1), summary(friend_count / tenure))
pf$friendships_initiated <- with(subset(pf, tenure >= 1), summary(friend_count / tenure))
with(subset(pf, tenure >= 1), summary(friend_count / tenure))
str(pf)
ggplot(subset(pf, tenure >= 1), aes(tenure, friend_count / tenure)) +
geom_line(color = year_joined.bucket)
ggplot(subset(pf, tenure >= 1), aes(tenure, friend_count / tenure)) +
geom_line(aes(color = year_joined.bucket))
ggplot(subset(pf, tenure >= 1), aes(tenure, friend_count / tenure)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_smooth(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
geom_line
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_smoth(aes(color = year_joined.bucket))
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_smooth(aes(color = year_joined.bucket))
yo <- read.csv('yogurt.csv')
str(yo)
head(yo)
yo$id <- factor(yo$id)
str(yo)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(yo, aes(price)) +
geom_histogram()
ggplot(yo, aes(price)) +
geom_histogram(binwidth = 10)
unique(yo$price)
names(yo)
"strawberry"+"blueberry"
names(yo)[4]
names(yo)[4:8]
for(name in names(yo)[4:8]) print name
for(name in names(yo)[4:8]) {print(name)}
yo <- transform(yo, all.purchase = strawberry + blueberry + pina.colada + plain + mixed.berry))
yo <- transform(yo, all.purchase = strawberry + blueberry + pina.colada + plain + mixed.berry)
yo
str(yo)
ggplot(yo, aes(time, price)) +
geom_point(alpha = 0.05, position = position_jitter(h=0))
ggplot(yo, aes(time, price)) +
geom_point(alpha = 0.25, shape = 21, position = position_jitter(h=0))
set.seed(123)
sample.ids <- sample(levels(yo$id), 16)
ggplot(subset(yo, id %in% sample.ids), aes(time,price)) +
facet_wrap( ~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
ggplot(data = subset(yo, id %in% sample.ids), aes(x=time, y=price)) +
facet_wrap( ~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
ggplot(yo, aes(time, price)) +
geom_point(alpha = 0.25, shape = 21, position = position_jitter(h=0))
ggplot(data = subset(yo, id %in% sample.ids), aes(x=time, y=price)) +
facet_wrap( ~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
str(yo)
ggplot(data = subset(yo, id %in% sample.ids), aes(x=time, y=all.purchases)) +
facet_wrap( ~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
install.packages(GGally)
install.packages("GGally")
library(GGally)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
set.seed(222)
pf_subset <- pf[,c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
cor(pf$friend_count, pf$friendships_initiated)
cor(pf_subset$friend_count, pf_subset$friendships_initiated)
set.seed(222)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
pf_subset <- pf[,c(2:7)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
pf_subset <- pf[,c(2:10)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
str(pf)
dim(pf)
sample(99003, 100)
sample_rows <- sample(99003, 100)
pf_subset <- pf[sample_rows,c(2:10)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
sample_rows <- sample(99003, 1000)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
sample_rows <- sample(99003, 10000)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
pf_subset <- pf[sample_rows,c(2:10)]
pf_subset <- pf[sample_rows,c(2:10)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
set.seed(223)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
pf_subset <- pf[,c(2:10)]
pf_subset <- pf[,c(2:10)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
pf_subset <- pf[,c(2:16)]
pf_subset <- pf[,c(2:13)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
set.seed(222)
sample_rows <- sample(99003, 10000)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
pf_subset <- pf[,c(2:13)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
colnames(nci) <- c(1:64)
nci <- read.table('nci.tsv')
nci <- read.table('nci.tsv')
colnames(nci) <- c(1:64)
head(nci)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c('gene', 'case', 'value')
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colors = colorRampPalette(c('blue', 'red'))(100))
