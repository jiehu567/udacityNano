0.95*0.99
0.95*0.16
0.05*0.16
0.05*0.84
0.95*0.84
0.152+0.042
0.152/0.194
0.0095+0.9405+0.0005+0.0495
0.0095+0.9405
0.98/0.99
0.01/(0.01+0.05/0.95*0.99)
0.01/(0.01+0.04/0.95*0.99)
0.01/(0.01+0.05/0.96*0.99)
data <- c(8,5,2,6,6,3,8,6,10,7,15,3,5,6,7,10,14,3,4,17,10,6,14,12,7,8,12,9,9)
table(data)
data <- c(8,5,2,6,6,3,8,6,10,7,15,3,5,6,7,10,14,3,4,17,10,6,14,12,7,8,12,9,15)
table(data)
mean(data)
mean(data)*length(data)
mean(data)*length(data)*0.333
sd <- function(x){
sum(x)/(length(x)-1)
}
sd(data)
mean(data)
sd <- function(x){
sqrt(sum(x)/(length(x)-1))
}
sd(data)
data <- c(8,5,2,6,6,3,8,6,10,7,15,9,15,3,5,6,7,10,14,3,4,17,10,6,14,12,7,8,12,9)
sd <- function(x){
sqrt(sum(x)/(length(x)-1))
}
sd(data)
mean(data)
sd <- function(x){
sqrt(sum(x)/(length(x)))
}
sd(data)
sum(data)
sd <- function(x){
sqrt(sum(x)^2/(length(x)-1))
}
sd(data)
sd <- function(x){
sqrt(sum(x^2)/(length(x)-1))
}
sd(data)
data^2
sd <- function(x){
return (sqrt(sum((x-mean(x))^2)/(length(x)-1)))
}
sd(data)
mu<- mean(data)
sd_data<-sd(data)
c(mu -  1.96*sd,mu +  1.96*sd)
c(mu -1.96*sd_data, mu+  1.96*sd_data)
mu
sd
sd_data
1.96*sd_data
c(mu -1.96*sd_data, mu+  1.96*sd_data)
choose(2,12)
choose(12,2)
choose(12,2) * 3 * choose(10, 5)
choose(12,2) * 3 * choose(10, 5)/2
pnorm(q =  -0.5/(0.12)^0.5,mean = 0, sd = (0.12)^0.5)
pnorm(q = -0.5, mean = 0, sd = (0.12)^0.5)
sin(43.1)
pnorm(-0.54)
0.294^5
1/0.7
47*13
X11()
x = 0:3
y = dbinom(x,3,2/5)
plot(y, type="h")
X11()
cdf = c(0,pbinom(x,3,2/5))
cdf.plot = stepfun(x,cdf,f=0)
plot.stepfun(cdf.plot,xlab="y",ylab="CDF",verticals=FALSE,do.points=TRUE,main="",pch=16)
X11()
x = 0:3
y = dpois(x,lambda = 5)
plot(y, type="h")
X11()
cdf = c(0,ppois(x, lambda = 5))
cdf.plot = stepfun(x,cdf,f=0)
plot.stepfun(cdf.plot,xlab="y",ylab="CDF",verticals=FALSE,do.points=TRUE,main="",pch=16)
B = 1000000  # number of replications of the experiment
# A : At least one 6 appears when 6 fair dice are rolled.
n = 6  # number of dice
k = 1  # number of time 6 appears in the n dice
r = replicate(B,sum(sample(1:6, n, replace = TRUE) == 6))
sum(r >= k)/B  # estimate probability
mean(r >= k)   # mean of Indicators
# B : At least two 6's appears when 12 fair dice are rolled.
n = 12  # number of dice
k = 2  # number of time 6 appears in the n dice
r = replicate(B,sum(sample(1:6, n, replace = TRUE) == 6))
sum(r >= k)/B  # estimate probability
mean(r >= k)   # mean of Indicators
# C : At least three 6's appears when 18 fair dice are rolled.
n = 18  # number of dice
k = 3  # number of time 6 appears in the n dice
r = replicate(B,sum(sample(1:6, n, replace = TRUE) == 6))
sum(r >= k)/B  # estimate probability
mean(r >= k)   # mean of Indicators
strt<-Sys.time()
games = 3  # number of times 6 appears
B = 1000000  # number of replications of the experiment
n = 6  # number of dice
r = numeric(games)
for(k in 1:games){
r[k] = mean(replicate(B,sum(sample(1:6, n, replace = TRUE) == 6)) >= k)
}
prob.est = r
prob.est
print(Sys.time()-strt)
prev <- 0.50  # prevalence = P(L)
sens <- 0.80	# sensitivity = P(+|L)
spec <- .90		# specificity = 1 - P(+|L^c)
reps <- 10000
true.pos.test.pos <- 0	# counter for lie detector catching a truly lying person
test.pos <- 0		# counter for lie detector says person is lying
for(i in 1:reps){
# simulate a person as lying or not
lie <- 0
if(runif(1) < prev){
lie <- 1
}
# if lying simulate if test positive or not
if(lie == 1 ){
if(runif(1) <= sens){
test.pos <- test.pos + 1
true.pos.test.pos <- true.pos.test.pos + 1
}
}
# if not lying simulate if test positive or not
else{
if(runif(1) <= (1-spec)) test.pos <- test.pos + 1
}
}
# simulated probability
true.pos.test.pos/test.pos
install.packages("doMC")
library(doMC)
library(diagram)
install.packages("diagram")
demo("flowchart")
library(diagram)
demo("flowchart")
demo("flowchart")
pnorm(0.01)
pnorm(0.005)
qnorm(0.005)
64/75
(40-110)/(50/sqrt(40))
(40-99)/(50/sqrt(110))
(99-110)/(50/sqrt(40))
pnorm(mean = 112, sd = 30, alpha = 0.05, q = 100)
pnorm(mean = 112, sd = 30, q = 100)
?dnorm
dnorm(mean = 112, sd = 30, x = 100)
2*68+112
248/190/190
248/190/2
0.653 * (1-0.653)/380
sqrt(0.653 * (1-0.653)/380)
qnorm(0.99)
0.653 + 2.326*0.0244
0.653 - 2.326*0.0244
(13700+212*169/25)/(100+169/25)
(16900/25)/(100+169/25)
(13700+121*169/25)/(100+169/25)
(13700+121*169/25)/(100+169/25)
135.9869-1.96*6.3
135.9869+1.96*6.3
121-1.96*10
121+1.96*10
pnorm(1.436)
(1-pnorm(1.436))/2
(1-pnorm(1.436))
(1-pnorm(1.436))*2
?qt
qt(p = .025,df=13)
qnorm(99.5%)
qnorm(0.995)
pt(q = -1.74, df = 17)
x = 685
sd = 112
mu = 499
(x-mu)/sd
1-pnorm(1.66)
(x-mu)/sd/sqrt(63)
qnorm(0.0005)
58.5+3.29*9.5/sqrt(57)
base = 10^6
pro = 1
for (i in 0:999){
num = base - i
pro = pro * num/base
}
pro
exp(-1/2)-exp(-9/2)
prob = 0.25
x = sqrt(-2*log(1-prob))
x
prob = 0.5
x = sqrt(-2*log(1-prob))
x
prob = 0.75
x = sqrt(-2*log(1-prob))
x
sqrt(1/12)
sqrt(1/12) + 1/2
sqrt(1/12) - 1/2
sqrt(1/12) + 1/2 - (-sqrt(1/12) + 1/2)
2*sqrt(1/12) - 1/2
2*sqrt(1/12) + 1/2
exp(-1)-exp(-2)
1-exp(-3)
1-exp(-4)
1-exp(-2)
pt(q = 1.2, df = 35)
1- pt(q = 1.2, df = 35)
stripchart(c(1,5,3,2))
devtools::install_github("rstudio/addinexamples", type = "source")
install.packages("rstudioapi", type = "source")
install.packages("rstudioapi", type = "source")
addinexamples:::findAndReplaceAddin()
878.64*2
16/35
13/35
4/35
2/35
shiny::runApp('~/test')
111000/6.1 - 111000/6.9
p6_data <- c(14.27,15.15,13.98,15.40,14.04,14.10,13.75,14.23,14.80,
13.98,14.47,14.68,13.68,15.47,14.87,14.44,12.28,
14.90,14.65,13.33,15.31,13.73,15.28,14.57,17.09,15.91,
14.73,14.41,14.32,13.65,14.43,15.10,14.52,15.18,
14.19,13.64,15.02,13.96,12.92,15.63,14.49,15.21,14.77,
14.01,14.57,15.56,13.83,14.56,14.75,14.30,14.92,15.49,
15.38,13.66,15.03,14.41,14.62,15.47,15.13)
Fn <- ecdf(p6_data)
Fn_values <- knots(Fn)
plot(ecdf(p6_data), main = "ecdf")
p6_data <- c(14.27,15.15,13.98,15.40,14.04,14.10,13.75,14.23,14.80,
13.98,14.47,14.68,13.68,15.47,14.87,14.44,12.28,
14.90,14.65,13.33,15.31,13.73,15.28,14.57,17.09,15.91,
14.73,14.41,14.32,13.65,14.43,15.10,14.52,15.18,
14.19,13.64,15.02,13.96,12.92,15.63,14.49,15.21,14.77,
14.01,14.57,15.56,13.83,14.56,14.75,14.30,14.92,15.49,
15.38,13.66,15.03,14.41,14.62,15.47,15.13)
Fn <- ecdf(p6_data)
Fn_values <- knots(Fn)
plot(ecdf(p6_data), main = "ecdf")
hist(p6_data)
p6_data <- c(14.27,15.15,13.98,15.40,14.04,14.10,13.75,14.23,14.80,
13.98,14.47,14.68,13.68,15.47,14.87,14.44,12.28,
14.90,14.65,13.33,15.31,13.73,15.28,14.57,17.09,15.91,
14.73,14.41,14.32,13.65,14.43,15.10,14.52,15.18,
14.19,13.64,15.02,13.96,12.92,15.63,14.49,15.21,14.77,
14.01,14.57,15.56,13.83,14.56,14.75,14.30,14.92,15.49,
15.38,13.66,15.03,14.41,14.62,15.47,15.13)
Fn <- ecdf(p6_data)
Fn_values <- knots(Fn)
plot(ecdf(p6_data), main = "ecdf")
hist(p6_data,breaks = 30)
sin(0.4^2) + sin(1.2^2) + sin(2^2) + sin(2.8^2) + sin(3.6^2)
4/5*(sin(0.4^2) + sin(1.2^2) + sin(2^2) + sin(2.8^2) + sin(3.6^2))
haz <- function(t) {
return (1/(24 -t))
}
t <- seq(0, 23, by = .01)
plot(t, haz(t), type = 'l')
hazard <- function(t) {
return (1/(24 -t))
}
t <- seq(0, 23, by = .01)
plot(t, hazard(t), type = 'l')
h <- function(t) {
return (1/(24 -t))
}
t <- seq(0, 23, by = .01)
plot(t, h(t), type = 'l')
?pbinom
1-pbinom(9, size=26, prob=5/26)
x = rbinom(5,26,5/26)
x = rbinom(5,26,5/26)
x
x = rbinom(1000,26,5/26)
x
x = rbinom(1000,26,5/26)
size(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
x = rbinom(1000,26,5/26)
length(x[x>10])
1-pbinom(26, size=26, prob=5/26)
pbinom(26, size=26, prob=5/26)
library(boot)
boot(seq(0,1,length.out = 10000)
)
seq(0,1,length.out = 10)
seq(0,1,length.out = 1)
seq(0,1,length.out = 2)
req(1,5)
rep(1,5)
rep(1,5)+rep(0,21)
ori_sample <- c(rep(1,21),rep(0,5))
ori_sample
sample(ori_sample, replace = TRUE)
sample(ori_sample, replace = TRUE)
sample(ori_sample, replace = TRUE)
sample(ori_sample, replace = TRUE)
sample(ori_sample, replace = TRUE, size = 1000)
rbinom(1000*26,26,5/26)
pbinom(10, size=26, prob=5/26)
1-pbinom(10, size=26, prob=5/26)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000),col=26)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000),ncol=26)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = FALSE),ncol=26)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=26)
boot_samples
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=26)
freq <- lapply(boot_samples, mean)
length(freq)
freq
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=26)
freq <- lapply(data.frame(boot_samples), mean)
length(freq)
freq
data.frame(boot_samples)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=1000)
freq <- lapply(data.frame(boot_samples), mean)
freq
hist(freq)
hist(boot_samples)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=1000)
counts <- lapply(data.frame(boot_samples), sum)
counts>10
sum(counts>10)
counts>10
counts
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
countsOfOutliers
countsOfOutliers > 10
sum(countsOfOutliers > 10)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=1000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers > 10)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=1000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers > 10)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 2600000, replace = TRUE),ncol=100000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers > 10)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 2600000, replace = TRUE),ncol=100000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers >= 10)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 26000, replace = TRUE),ncol=1000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers >= 10)
1-pbinom(26, size=26, prob=5/26)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 2600000, replace = TRUE),ncol=100000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers >= 26)
set.seed(123)
ori_sample <- c(rep(1,21),rep(0,5))
boot_samples <- matrix(sample(ori_sample, 2600000, replace = TRUE),ncol=100000)
getCount <-function(x){
return (26-sum(x))
}
countsOfOutliers <- lapply(data.frame(boot_samples), getCount)
sum(countsOfOutliers >= 26)
prob6_data <- c(14.27,15.15,13.98,15.40,14.04,14.10,13.75,14.23,14.80,
13.98,14.47,14.68,13.68,15.47,14.87,14.44,12.28,
14.90,14.65,13.33,15.31,13.73,15.28,14.57,17.09,15.91,
14.73,14.41,14.32,13.65,14.43,15.10,14.52,15.18,
14.19,13.64,15.02,13.96,12.92,15.63,14.49,15.21,14.77,
14.01,14.57,15.56,13.83,14.56,14.75,14.30,14.92,15.49,
15.38,13.66,15.03,14.41,14.62,15.47,15.13)
Fn <- ecdf(prob6_data)
Fn_values <- knots(Fn)
plot(ecdf(prob6_data), main = "ecdf")
hist(prob6_data,breaks = 30)
qqnorm(prob6_data); qqline(prob6_data)
quantile(prob6_data, c(.10, .25, .5, .75, .9))
mean(prob6_data)
mean(prob6_data)
std(prob6_data)
mean(prob6_data)
sd(prob6_data)
after_delution <- c(1,3,5)*0.85+c(99,97,95)*14.58
c(1,3,5)*0.85+c(99,97,95)*14.58
c(1,3,5)*0.85+c(99,97,95)*0.1458
rangeOfdetect <- mean(prob6_data) + c(-1,1)*3* sd(prob6_data)
rangeOfdetect
# The actual percentage is:
c(1,3,5)*0.85+c(99,97,95)*0.1458
library(car)
summary(car)
summary(cars)
boxplot(cars)
library(car)
summary(cars)
setwd('/Users/hujie/Desktop/CurrentLearning/nano_work/P4_EDA_R/')
library(ggplot2)
library(RColorBrewer)
data(diamonds)
qplot(data = diamonds, x = carat, y = price, color = cut) +
scale_color_brewer(palette = 'Accent')
install.packages("swirl")
library(swirl)
swirl()
summary(mtcars)
reddit <- read.csv('./eda-course-materials/lesson2/reddit.csv')
reddit <- read.csv('./eda-course-materials/lesson2/reddit.csv')
str(reddit)
qplot(data = reddit, x = age.range)
5 + 7
levels(reddit$income.range)
lvs = c("Under $20,000", "$20,000 - $29,999", "$30,000 - $39,999","$40,000 - $49,999","$50,000 - $69,999", "$70,000 - $99,999", "$100,000 - $149,999", "$150,000 or more")
reddit.order <- ordered(reddit$income.range, levels = lvs)
reddit.order
x <- 5 + 7
x
x -3
y <- x-3
saf
reddit.order <- ordered(reddit$income.range, levels = lvs)
info()
bye()
reddit.order <- ordered(reddit$income.range, levels = lvs)
reddit.order
lvs_income = c("Under $20,000", "$20,000 - $29,999", "$30,000 - $39,999","$40,000 - $49,999","$50,000 - $69,999", "$70,000 - $99,999", "$100,000 - $149,999", "$150,000 or more")
reddit.order <- ordered(reddit$income.range, levels = lvs_income)
ordered(reddit$age.range, levels = lvs_age)
lvs_age <- c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above")
ordered(reddit$age.range, levels = lvs_age)
reddit$age.range <- ordered(reddit$age.range, levels = lvs_age)
reddit$age.range
reddit <- read.csv('./eda-course-materials/lesson2/reddit.csv')
str(reddit)
par(mfrow=c(2,1))
qplot(data = reddit, x = age.range)
lvs_age <- c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above")
reddit$age.range <- ordered(reddit$age.range, levels = lvs_age)
qplot(data = reddit, x = age.range)
reddit <- read.csv('./eda-course-materials/lesson2/reddit.csv')
reddit <- read.csv('./eda-course-materials/lesson2/reddit.csv')
str(reddit)
str(reddit)
qplot(data = reddit, x = age.range)
lvs_age <- c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above")
reddit$age.range <- ordered(reddit$age.range, levels = lvs_age)
qplot(data = reddit, x = age.range)
reddit$age.range <- factor(reddit$age.range, levels = lvs_age, order = T)
qplot(data = reddit, x = age.range)
